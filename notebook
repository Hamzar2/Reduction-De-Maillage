{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10292087,"sourceType":"datasetVersion","datasetId":6369588}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## **1. load\\_obj() Function:**\n\n*   **Purpose:** This function is responsible for parsing and loading a 3D model from an OBJ file.\n    \n*   **Input:** file\\_path (string): The path to the OBJ file.\n    \n*   **Output:** A tuple containing lists of:\n    \n    *   vertices (list of lists of floats): Coordinates of each vertex (x, y, z).\n        \n    *   textures (list of lists of floats): Texture coordinates (u, v, w - w is optional).\n        \n    *   normals (list of lists of floats): Normal vectors for each vertex (x, y, z).\n        \n    *   faces (list of lists of tuples): Information about each face. Each face is a list of vertex indices (and optionally texture and normal indices). The tuple structure is (vertex\\_index, texture\\_index, normal\\_index).\n        \n    *   groups (dictionary): Mapping of group names to the indices of the faces belonging to that group.\n        \n    *   materials (dictionary): Currently not populated in this code, intended for material information.\n        \n    *   mtl\\_file (string or None): The name of the associated MTL (Material Template Library) file, if specified in the OBJ file.\n        \n*   **How it works:**\n    \n    *   It opens the OBJ file and reads it line by line.\n        \n    *   It ignores empty lines and lines starting with # (comments).\n        \n    *   It identifies keywords like v (vertex), vt (texture coordinate), vn (normal vector), f (face), g (group), usemtl (use material), and mtllib (material library file).\n        \n    *   Based on the keyword, it parses the subsequent data and appends it to the respective lists.\n        \n    *   **Face Parsing:** The face data is particularly important. It handles different formats of face definitions (e.g., v1, v1/vt1, v1/vt1/vn1). It also handles negative indices (which refer to vertices from the end of the list). Indices are 0-based after processing.","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom collections import defaultdict\nimport heapq\n\ndef load_obj(file_path):\n    vertices = []\n    textures = []\n    normals = []\n    faces = []\n    groups = {}\n    materials = {}\n    current_group = None\n    mtl_file = None\n\n    with open(file_path, 'r') as file:\n        for line in file:\n            line = line.strip()\n            if not line or line.startswith('#'):\n                continue\n            parts = line.split()\n            keyword = parts[0]\n\n            if keyword == 'v':\n                vertices.append(list(map(float, parts[1:])))\n            elif keyword == 'vt':\n                textures.append(list(map(float, parts[1:])))\n            elif keyword == 'vn':\n                normals.append(list(map(float, parts[1:])))\n            elif keyword == 'f':\n                face_data = []\n                for vertex_part in parts[1:]:\n                    indices = vertex_part.split('/')\n                    v_index = int(indices[0])\n                    if v_index < 0:\n                        v_index += len(vertices)\n                    v_index -= 1\n\n                    vt_index = None\n                    if len(indices) > 1 and indices[1]:\n                        vt_index = int(indices[1])\n                        if vt_index < 0:\n                            vt_index += len(textures)\n                        vt_index -= 1\n\n                    vn_index = None\n                    if len(indices) > 2 and indices[2]:\n                        vn_index = int(indices[2])\n                        if vn_index < 0:\n                            vn_index += len(normals)\n                        vn_index -= 1\n\n                    face_data.append((v_index, vt_index, vn_index))\n                faces.append(face_data)\n                if current_group:\n                    if current_group not in groups:\n                        groups[current_group] = []\n                    groups[current_group].append(len(faces) - 1) # Stocker l'index de la face\n            elif keyword == 'g':\n                if len(parts) > 1:\n                    current_group = parts[1]\n            elif keyword == 'usemtl':\n                if len(parts) > 1:\n                    current_material = parts[1]\n                    # Vous pouvez choisir de stocker l'association face -> matériau si nécessaire\n            elif keyword == 'mtllib':\n                if len(parts) > 1:\n                    mtl_file = parts[1]\n                    # Vous pouvez ajouter une fonction pour parser le fichier .mtl ici\n\n    return vertices, textures, normals, faces, groups, materials, mtl_file","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-25T04:39:53.600191Z","iopub.execute_input":"2024-12-25T04:39:53.600546Z","iopub.status.idle":"2024-12-25T04:39:53.612757Z","shell.execute_reply.started":"2024-12-25T04:39:53.600519Z","shell.execute_reply":"2024-12-25T04:39:53.611426Z"}},"outputs":[],"execution_count":88},{"cell_type":"markdown","source":"## **2. vertex\\_clustering() Function:**\n\n*   **Purpose:** This function simplifies the mesh by grouping nearby vertices into cells of a 3D grid and replacing them with a single representative vertex (the barycenter or average position).\n    \n*   **Inputs:**\n    \n    *   vertices (list of lists of floats): Original vertex coordinates.\n        \n    *   textures (list of lists of floats): Original texture coordinates.\n        \n    *   normals (list of lists of floats): Original normal vectors.\n        \n    *   faces (list of lists of tuples): Original face data.\n        \n    *   grid\\_resolution (int or list of ints): Defines the resolution of the 3D grid. If an integer is provided, the grid will be uniform in all dimensions. If a list of three integers is provided, it defines the resolution for x, y, and z dimensions separately.\n        \n*   **Output:** A tuple containing lists of:\n    \n    *   new\\_vertices (list of lists of floats): Simplified vertex coordinates (barycenters).\n        \n    *   new\\_textures (list of lists of floats): Average texture coordinates for each cell (if textures exist).\n        \n    *   new\\_normals (list of lists of floats): Average normal vectors for each cell (if normals exist).\n        \n    *   new\\_faces (list of lists of tuples): Updated face data referencing the new vertices.\n        \n*   **How it works:**\n    \n    1.  **Determine Grid:** It calculates the bounding box of the model and creates a 3D grid based on the grid\\_resolution.\n        \n    2.  **Assign Vertices to Cells:** It iterates through the original vertices and assigns each vertex to a specific cell in the grid based on its coordinates.\n        \n    3.  **Calculate Cell Representatives:** For each cell containing vertices:\n        \n        *   It calculates the **barycenter** (average position) of the vertices in that cell. This becomes a new vertex.\n            \n        *   It calculates the **average texture coordinates** and **average normal vectors** for the vertices in the cell (if texture and normal data are available).\n            \n    4.  **Update Faces:** It iterates through the original faces and updates the vertex indices to refer to the new barycenter vertices. If all vertices of a face fall into the same cell (or their corresponding barycenters are the same), the face is kept. Degenerate faces (where all vertices collapse to the same point) are avoided.\n        \n    5.  **Filter and Re-index:** It filters out None values from new\\_textures and new\\_normals (for cells without original texture or normal data). Then, it re-indexes the texture and normal indices in the new\\_faces to match the filtered lists.","metadata":{}},{"cell_type":"code","source":"def vertex_clustering(vertices, textures, normals, faces, grid_resolution):\n    if isinstance(grid_resolution, int):\n        grid_resolution = [grid_resolution] * 3\n\n    min_coords = np.min(vertices, axis=0)\n    max_coords = np.max(vertices, axis=0)\n    grid_size = (max_coords - min_coords) / np.array(grid_resolution)\n\n    # 2. Assigner les sommets aux cellules\n    cell_map = defaultdict(list)\n    for i, vertex in enumerate(vertices):\n        cell_index = tuple(((vertex - min_coords) // grid_size).astype(int))\n        cell_map[cell_index].append(i)\n\n    # 3. Calculer le barycentre, la texture moyenne et la normale moyenne pour chaque cellule\n    new_vertices = []\n    new_textures = []\n    new_normals = []\n    cell_barycenter_map = {}  # Associe l'index de la cellule à l'index du nouveau sommet\n    for cell_index, vertex_indices in cell_map.items():\n        cell_vertices = [vertices[i] for i in vertex_indices]\n        if cell_vertices:\n            barycenter = np.mean(cell_vertices, axis=0).tolist()\n            new_vertices.append(barycenter)\n            cell_barycenter_map[cell_index] = len(new_vertices) - 1\n\n            # Calculer la texture moyenne\n            cell_textures = [textures[i] for i in vertex_indices if textures]\n            if cell_textures:\n                avg_texture = np.mean(cell_textures, axis=0).tolist()\n                new_textures.append(avg_texture)\n            else:\n                new_textures.append(None)  # Gérer le cas sans textures\n\n            # Calculer la normale moyenne\n            cell_normals = [normals[i] for i in vertex_indices if normals]\n            if cell_normals:\n                avg_normal = np.mean(cell_normals, axis=0).tolist()\n                new_normals.append(avg_normal)\n            else:\n                new_normals.append(None)  # Gérer le cas sans normales\n\n    # 4. Mettre à jour les faces\n    new_faces = []\n    for face in faces:\n        new_face_data = []\n        valid_face = True\n        for vertex_index, texture_index, normal_index in face:\n            vertex = vertices[vertex_index]\n            cell_index = tuple(((vertex - min_coords) // grid_size).astype(int))\n            if cell_index in cell_barycenter_map:\n                new_vertex_index = cell_barycenter_map[cell_index]\n\n                # Trouver l'index de texture et de normale correspondant au barycentre de la cellule\n                new_texture_index = new_vertex_index if new_textures[new_vertex_index] is not None else None\n                new_normal_index = new_vertex_index if new_normals[new_vertex_index] is not None else None\n\n                new_face_data.append((new_vertex_index, new_texture_index, new_normal_index))\n            else:\n                valid_face = False # Skip faces where original vertices are not assigned to any cell\n                break\n\n        if valid_face:\n            # Éviter les faces dégénérées\n            unique_vertices_in_face = list(set(idx for idx, _, _ in new_face_data))\n            if len(unique_vertices_in_face) >= 3:\n                new_faces.append(new_face_data)\n\n    # Filter out None values from new_textures and new_normals\n    new_textures_filtered = [t for t in new_textures if t is not None]\n    new_normals_filtered = [n for n in new_normals if n is not None]\n\n    # Re-index faces to match the filtered texture and normal lists\n    if new_textures_filtered or new_normals_filtered:\n        new_faces_reindexed = []\n        for face in new_faces:\n            new_face_data_reindexed = []\n            for v_idx, vt_idx, vn_idx in face:\n                original_vt_index = new_textures.index(new_textures_filtered[vt_idx]) if vt_idx is not None and new_textures_filtered else None\n                original_vn_index = new_normals.index(new_normals_filtered[vn_idx]) if vn_idx is not None and new_normals_filtered else None\n                new_face_data_reindexed.append((v_idx, original_vt_index, original_vn_index))\n            new_faces_reindexed.append(new_face_data_reindexed)\n        return new_vertices, new_textures_filtered, new_normals_filtered, new_faces_reindexed\n    else:\n        return new_vertices, [], [], new_faces","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-25T04:39:53.614201Z","iopub.execute_input":"2024-12-25T04:39:53.614618Z","iopub.status.idle":"2024-12-25T04:39:53.636315Z","shell.execute_reply.started":"2024-12-25T04:39:53.614577Z","shell.execute_reply":"2024-12-25T04:39:53.635350Z"}},"outputs":[],"execution_count":89},{"cell_type":"markdown","source":"## **3. get\\_edges\\_from\\_faces() Function:**\n\n*   **Purpose:** Extracts unique edges from the list of faces. An edge is defined by a pair of connected vertices.\n    \n*   **Input:** faces (list of lists of tuples): Face data.\n    \n*   **Output:** edges (set of tuples): A set containing tuples representing each unique edge. Each tuple contains the sorted indices of the two vertices forming the edge (ensuring that the order doesn't matter, so (1, 2) and (2, 1) represent the same edge).\n    \n*   **How it works:**\n    \n    *   It iterates through each face.\n        \n    *   For each face (assuming it's a triangle), it extracts the vertex indices of the three edges forming the triangle.\n        \n    *   It sorts the vertex indices of each edge to ensure consistency.\n        \n    *   It adds the sorted tuple representing the edge to a set, which automatically handles duplicates.\n        \n\n## **4. calculate\\_edge\\_cost() Function:**\n\n*   **Purpose:** Calculates a cost for collapsing a specific edge. In this case, the cost is simply the geometric distance between the two vertices forming the edge.\n    \n*   **Inputs:**\n    \n    *   vertices (list of lists of floats): Vertex coordinates.\n        \n    *   edge (tuple of ints): A tuple containing the indices of the two vertices forming the edge.\n        \n*   **Output:** float: The Euclidean distance between the two vertices.\n    \n*   **How it works:**\n    \n    *   It retrieves the coordinates of the two vertices forming the edge.\n        \n    *   It calculates the Euclidean distance between these two points using the np.linalg.norm() function.\n        \n\n## **5. initialize\\_edge\\_costs() Function:**\n\n*   **Purpose:** Calculates the cost for each edge in a set of edges and stores them in a min-heap data structure. A min-heap allows efficient retrieval of the edge with the lowest cost.\n    \n*   **Inputs:**\n    \n    *   vertices (list of lists of floats): Vertex coordinates.\n        \n    *   edges (set of tuples): A set of edges.\n        \n*   **Output:** edge\\_heap (list): A min-heap (represented as a list) where each element is a tuple (cost, edge). The heap is ordered based on the cost.\n    \n*   **How it works:**\n    \n    *   It iterates through each edge in the edges set.\n        \n    *   For each edge, it calls calculate\\_edge\\_cost to get its cost.\n        \n    *   It pushes the (cost, edge) tuple onto the edge\\_heap using heapq.heappush(), which maintains the min-heap property.\n        \n\n## **6. collapse\\_edge() Function:**\n\n*   **Purpose:** This function performs the core operation of edge collapse, merging the two vertices of a selected edge into a single vertex.\n    \n*   **Inputs:**\n    \n    *   vertices (list of lists of floats): Current vertex coordinates.\n        \n    *   textures (list of lists of floats): Current texture coordinates.\n        \n    *   normals (list of lists of floats): Current normal vectors.\n        \n    *   faces (list of lists of tuples): Current face data.\n        \n    *   edge\\_to\\_collapse (tuple of ints): The indices of the two vertices forming the edge to be collapsed.\n        \n    *   collapse\\_to (str, optional): Specifies where the new merged vertex should be located. Options are:\n        \n        *   'midpoint' (default): The new vertex is placed at the midpoint between the two original vertices.\n            \n        *   'v1': The new vertex takes the position of the first vertex in the edge.\n            \n        *   'v2': The new vertex takes the position of the second vertex in the edge.\n            \n*   **Output:** A tuple containing the updated lists of vertices, textures, normals, and faces.\n    \n*   **How it works:**\n    \n    1.  **Identify Vertices:** It identifies the indices of the two vertices involved in the edge collapse.\n        \n    2.  **Calculate New Vertex Position:** Based on the collapse\\_to method, it calculates the position of the new merged vertex.\n        \n    3.  **Update Vertex List:** The position of one of the vertices in the vertices list is updated to the new calculated position.\n        \n    4.  **Update Faces:** It iterates through the faces and:\n        \n        *   **Replaces occurrences:** Wherever the indices of the collapsed vertices appear in a face, they are replaced with the index of the vertex that remains (or the index of the new midpoint vertex).\n            \n        *   **Handles Degeneracy:** Faces that become degenerate (all vertices collapse to the same point) are removed.\n            \n        *   **Remaps Indices:** After removing one of the original vertices, the indices of subsequent vertices in the faces list are adjusted to reflect the removal.","metadata":{}},{"cell_type":"code","source":"def get_edges_from_faces(faces):\n    \"\"\"\n    Extracts unique edges from a list of faces.\n\n    Args:\n        faces (list): List of faces, where each face is a list of vertex indices.\n\n    Returns:\n        set: A set of tuples, where each tuple represents an edge (sorted vertex indices).\n    \"\"\"\n    edges = set()\n    for face in faces:\n        v_indices = sorted([face[i][0] for i in range(len(face))])\n        for i in range(len(v_indices)):\n            for j in range(i + 1, len(v_indices)):\n                edges.add(tuple(sorted((v_indices[i], v_indices[j]))))\n    return edges\n\ndef calculate_edge_cost(vertices, edge):\n    \"\"\"\n    Calculates the geometric distance between the vertices of an edge.\n\n    Args:\n        vertices (list): List of vertex coordinates.\n        edge (tuple): Tuple representing an edge (vertex indices).\n\n    Returns:\n        float: The geometric distance between the vertices.\n    \"\"\"\n    v1_index, v2_index = edge\n    v1_coords = np.array(vertices[v1_index])\n    v2_coords = np.array(vertices[v2_index])\n    return np.linalg.norm(v1_coords - v2_coords)\n\ndef initialize_edge_costs(vertices, edges):\n    \"\"\"\n    Calculates the cost for each edge and stores them in a min-heap.\n\n    Args:\n        vertices (list): List of vertex coordinates.\n        edges (set): Set of edges.\n\n    Returns:\n        list: A min-heap of (cost, edge) tuples.\n    \"\"\"\n    edge_heap = []\n    for edge in edges:\n        cost = calculate_edge_cost(vertices, edge)\n        heapq.heappush(edge_heap, (cost, edge))\n    return edge_heap\n\ndef collapse_edge(vertices, textures, normals, faces, edge_to_collapse, collapse_to='midpoint'):\n    \"\"\"\n    Collapses a given edge, merging its two vertices.\n\n    Args:\n        vertices (list): List of vertex coordinates.\n        textures (list): List of texture coordinates.\n        normals (list): List of normal vectors.\n        faces (list): List of faces.\n        edge_to_collapse (tuple): The edge to collapse (vertex indices).\n        collapse_to (str): How to calculate the new vertex position ('midpoint', 'v1', 'v2').\n\n    Returns:\n        tuple: Updated vertices, textures, normals, and faces.\n    \"\"\"\n    v1_index, v2_index = sorted(edge_to_collapse)\n    v1 = np.array(vertices[v1_index])\n    v2 = np.array(vertices[v2_index])\n\n    # Calculate the new vertex position\n    if collapse_to == 'midpoint':\n        new_vertex_pos = ((v1 + v2) / 2).tolist()\n    elif collapse_to == 'v1':\n        new_vertex_pos = v1.tolist()\n    elif collapse_to == 'v2':\n        new_vertex_pos = v2.tolist()\n    else:\n        raise ValueError(\"Invalid collapse_to method.\")\n\n    # Add the new vertex\n    new_vertex_index = len(vertices)\n    new_vertices = vertices\n    if v1_index < len(new_vertices):\n        new_vertices[v1_index] = new_vertex_pos\n    else:\n        new_vertices.append(new_vertex_pos)\n\n    new_faces = []\n    for face in faces:\n        new_face = []\n        replace_v1 = False\n        replace_v2 = False\n        for v_idx, vt_idx, vn_idx in face:\n            if v_idx == v1_index:\n                replace_v1 = True\n                new_face.append((v2_index, vt_idx, vn_idx))\n            elif v_idx == v2_index:\n                replace_v2 = True\n                new_face.append((v2_index, vt_idx, vn_idx))\n            else:\n                new_face.append((v_idx if v_idx < v1_index else v_idx -1 if v_idx > v1_index else v_idx, vt_idx, vn_idx))\n\n        unique_vertices = set(v_idx for v_idx, _, _ in new_face)\n        if len(unique_vertices) >= 3:\n            new_faces.append(new_face)\n\n    # Remove the collapsed vertex. Adjust indices in faces.\n    # new_vertices = [v for i, v in enumerate(vertices) if i != v1_index]\n    # new_faces = []\n    # for face in faces:\n    #     if all(idx[0] != v1_index for idx in face):\n    #         remapped_face = []\n    #         for v_idx, vt_idx, vn_idx in face:\n    #             new_v_idx = v_idx if v_idx < v1_index else v_idx - 1\n    #             remapped_face.append((new_v_idx, vt_idx, vn_idx))\n    #         new_faces.append(remapped_face)\n\n    return new_vertices, textures, normals, new_faces","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-25T04:39:53.852645Z","iopub.execute_input":"2024-12-25T04:39:53.853242Z","iopub.status.idle":"2024-12-25T04:39:53.866668Z","shell.execute_reply.started":"2024-12-25T04:39:53.853137Z","shell.execute_reply":"2024-12-25T04:39:53.865266Z"}},"outputs":[],"execution_count":90},{"cell_type":"markdown","source":"## **7. simplify\\_mesh() Function:**\n\n*   **Purpose:** This function implements the iterative edge collapse simplification algorithm. It repeatedly collapses the \"cheapest\" edge (the one with the smallest cost) until a target number of edge collapses is reached.\n    \n*   **Inputs:**\n    \n    *   vertices (list of lists of floats): Original vertex coordinates.\n        \n    *   textures (list of lists of floats): Original texture coordinates.\n        \n    *   normals (list of lists of floats): Original normal vectors.\n        \n    *   faces (list of lists of tuples): Original face data.\n        \n    *   target\\_reduction (int): The desired number of edge collapses to perform.\n        \n*   **Output:** A tuple containing the simplified lists of vertices, textures, normals, and faces.\n    \n*   **How it works:**\n    \n    1.  **Initialization:** It initializes the current mesh data and calculates the initial set of edges and their costs using a min-heap.\n        \n    2.  **Iterative Collapse:** It enters a loop that continues until the target\\_reduction is reached or there are no more edges to collapse:\n        \n        *   **Get Cheapest Edge:** It retrieves the edge with the lowest cost from the min-heap.\n            \n        *   **Validate Edge:** It checks if the vertices of the edge are still valid (haven't been merged in a previous collapse).\n            \n        *   **Collapse Edge:** It calls the collapse\\_edge function to merge the two vertices of the selected edge.\n            \n        *   **Update Edge Heap:** After collapsing an edge, the mesh topology changes, so it rebuilds the edge heap to reflect the new set of edges and their costs (this is a computationally intensive step and can be optimized).\n            \n    3.  **Return Simplified Mesh:** Once the loop finishes, it returns the simplified mesh data.","metadata":{}},{"cell_type":"code","source":"def simplify_mesh(vertices, textures, normals, faces, target_reduction):\n    \"\"\"\n    Simplifies a mesh by iteratively collapsing edges.\n\n    Args:\n        vertices (list): List of vertex coordinates.\n        textures (list): List of texture coordinates.\n        normals (list): List of normal vectors.\n        faces (list): List of faces.\n        target_reduction (int): The target number of edge collapses.\n\n    Returns:\n        tuple: Simplified vertices, textures, normals, and faces.\n    \"\"\"\n    current_vertices = list(vertices)\n    current_textures = list(textures)\n    current_normals = list(normals)\n    current_faces = list(faces)\n\n    edges = get_edges_from_faces(current_faces)\n    edge_heap = initialize_edge_costs(current_vertices, edges)\n\n    collapsed_edges_count = 0\n    while collapsed_edges_count < target_reduction and edge_heap:\n        cost, edge_to_collapse = heapq.heappop(edge_heap)\n\n        # Check if the edge is still valid (vertices haven't been merged yet)\n        if edge_to_collapse[0] >= len(current_vertices) or edge_to_collapse[1] >= len(current_vertices) or edge_to_collapse[0] == edge_to_collapse[1]:\n            continue\n\n        current_vertices, current_textures, current_normals, current_faces = collapse_edge(\n            current_vertices, current_textures, current_normals, current_faces, edge_to_collapse\n        )\n        collapsed_edges_count += 1\n\n        # Rebuild the edge heap (can be optimized)\n        edges = get_edges_from_faces(current_faces)\n        edge_heap = initialize_edge_costs(current_vertices, edges)\n\n    return current_vertices, current_textures, current_normals, current_faces","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-25T04:39:53.868200Z","iopub.execute_input":"2024-12-25T04:39:53.868579Z","iopub.status.idle":"2024-12-25T04:39:53.889664Z","shell.execute_reply.started":"2024-12-25T04:39:53.868539Z","shell.execute_reply":"2024-12-25T04:39:53.888571Z"}},"outputs":[],"execution_count":91},{"cell_type":"code","source":"vertices, textures, normals, faces, groups, materials, mtl_file = load_obj(\"/kaggle/input/objects/obj1.obj\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-25T04:39:53.891349Z","iopub.execute_input":"2024-12-25T04:39:53.891733Z","iopub.status.idle":"2024-12-25T04:39:54.087774Z","shell.execute_reply.started":"2024-12-25T04:39:53.891706Z","shell.execute_reply":"2024-12-25T04:39:54.086416Z"}},"outputs":[],"execution_count":92},{"cell_type":"code","source":"new_vertices_vc, new_textures_vc, new_normals_vc, new_faces_vc = vertex_clustering(\n    vertices, textures, normals, faces, (5, 10, 15)\n)\n\nprint(\"Nombre de sommets avant le clustering:\", len(vertices))\nprint(\"Nombre de sommets après le clustering:\", len(new_vertices_vc))\nprint(\"Nombre de textures avant le clustering:\", len(textures))\nprint(\"Nombre de textures après le clustering:\", len(new_textures_vc))\nprint(\"Nombre de normales avant le clustering:\", len(normals))\nprint(\"Nombre de normales après le clustering:\", len(new_normals_vc))\nprint(\"Nombre de faces avant le clustering:\", len(faces))\nprint(\"Nombre de faces après le clustering:\", len(new_faces_vc))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-25T04:39:54.089539Z","iopub.execute_input":"2024-12-25T04:39:54.090135Z","iopub.status.idle":"2024-12-25T04:39:54.189149Z","shell.execute_reply.started":"2024-12-25T04:39:54.090078Z","shell.execute_reply":"2024-12-25T04:39:54.188171Z"}},"outputs":[{"name":"stdout","text":"Nombre de sommets avant le clustering: 1369\nNombre de sommets après le clustering: 270\nNombre de textures avant le clustering: 0\nNombre de textures après le clustering: 0\nNombre de normales avant le clustering: 1393\nNombre de normales après le clustering: 270\nNombre de faces avant le clustering: 2734\nNombre de faces après le clustering: 634\n","output_type":"stream"}],"execution_count":93},{"cell_type":"code","source":"# Get edges and initialize edge costs\nedges = get_edges_from_faces(new_faces_vc)\nprint(f\"Number of edges: {len(edges)}\")\nedge_heap = initialize_edge_costs(new_vertices_vc, edges)\nprint(f\"Number of edges in heap: {len(edge_heap)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-25T04:39:54.190563Z","iopub.execute_input":"2024-12-25T04:39:54.190984Z","iopub.status.idle":"2024-12-25T04:39:54.206478Z","shell.execute_reply.started":"2024-12-25T04:39:54.190921Z","shell.execute_reply":"2024-12-25T04:39:54.205533Z"}},"outputs":[{"name":"stdout","text":"Number of edges: 867\nNumber of edges in heap: 867\n","output_type":"stream"}],"execution_count":94},{"cell_type":"code","source":"# Simplify the mesh\ntarget_reduction = 100  # Define the number of edges to collapse\nsimplified_vertices, simplified_textures, simplified_normals, simplified_faces = simplify_mesh(\n    new_vertices_vc, new_textures_vc, new_normals_vc, new_faces_vc, target_reduction\n)\n\nprint(\"Nombre de sommets après simplification:\", len(simplified_vertices))\nprint(\"Nombre de faces après simplification:\", len(simplified_faces))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-25T04:39:54.207557Z","iopub.execute_input":"2024-12-25T04:39:54.207915Z","iopub.status.idle":"2024-12-25T04:39:54.782499Z","shell.execute_reply.started":"2024-12-25T04:39:54.207888Z","shell.execute_reply":"2024-12-25T04:39:54.781408Z"}},"outputs":[{"name":"stdout","text":"Nombre de sommets après simplification: 270\nNombre de faces après simplification: 266\n","output_type":"stream"}],"execution_count":95}]}